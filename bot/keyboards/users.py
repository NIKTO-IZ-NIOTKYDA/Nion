from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import utils
import other.log.colors as colors
import other.log.logging as logging
from handlers.core import GetLessons
from keyboards.admins import __DELETE_SCHEDULE_WARN__
from keyboards.other import GenLesson, GenButtonBack, __BACK_IN_MAIN_MENU__

log = logging.logging(Name='INIT', Color=colors.purple)

__HOMEWORK__: InlineKeyboardMarkup = GenLesson(appstart_callback_data='lesson:show:', lessons=GetLessons())
__HOMEWORK__.inline_keyboard.append([__BACK_IN_MAIN_MENU__])
log.init('__HOMEWORK__' + ': OK')

__OFF_NOTIFICATIONS__ = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
    [InlineKeyboardButton(text='–î–∞, —è —Ö–æ—á—É –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='profile:notifications:off')],
    [InlineKeyboardButton(text='–ù–µ—Ç, —è —Ö–æ—á—É –æ—Å—Ç–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='profile')]
])
log.init('__OFF_NOTIFICATIONS__' + ': OK')

__SCHEDULE_RECESS__ = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
    [InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='schedule:recess')],
    [__BACK_IN_MAIN_MENU__]
])
log.init('__SCHEDULE_RECESS__' + ': OK')


async def GenStart(user_id: int) -> InlineKeyboardMarkup:
    buttons: list[list[InlineKeyboardButton]] = []
    if (await utils.GetPermissions(user_id)).lessons.use:
        buttons.append([InlineKeyboardButton(text='–£—Ä–æ–∫–∏ üìö', callback_data='lessons')])

    if (await utils.GetPermissions(user_id)).schedule.use:
        buttons.append([InlineKeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìë', callback_data='schedule')])

    if (await utils.GetPermissions(user_id)).schedule_call.use:
        buttons.append([InlineKeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ üïù', callback_data='schedule:recess')])

    if (await utils.GetPermissions(user_id)).schedule_exam.use:
        buttons.append([InlineKeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤ üéØ', callback_data='schedule:exam')])

    if (
            (await utils.GetPermissions(user_id)).admin_panel.use.server_status or
            (await utils.GetPermissions(user_id)).admin_panel.use.newsletter or
            (await utils.GetPermissions(user_id)).admin_panel.use.role
            ):
        buttons.append([InlineKeyboardButton(text='–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å‚ÄºÔ∏è', callback_data='admin_panel')])

    buttons.append([InlineKeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å üë§', callback_data='profile')])

    return InlineKeyboardMarkup(row_width=1, inline_keyboard=buttons)


async def GenLesson(user_id: int, lesson_id: str, url: str | None) -> InlineKeyboardMarkup:
    buttons: list[list[InlineKeyboardButton]] = []

    if (await utils.GetPermissions(user_id)).lessons.edit.homework:
        buttons.append([InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å ‚ùå', callback_data=f'lesson:delete_warn:{lesson_id}')])
    else:
        buttons.append([InlineKeyboardButton(text='‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚ö†Ô∏è', callback_data=f'lesson:nftadmins:{lesson_id}')])

    if url is not None:
        buttons.append([InlineKeyboardButton(text='–ì–î–ó', url=url)])

    buttons.append([GenButtonBack('lessons')])
    buttons.append([__BACK_IN_MAIN_MENU__])

    return InlineKeyboardMarkup(row_width=1, inline_keyboard=buttons)


async def GenSchedule(user_id: int) -> InlineKeyboardMarkup:
    buttons: list[list[InlineKeyboardButton]] = []

    if (await utils.GetPermissions(user_id)).schedule.edit:
        buttons.append([__DELETE_SCHEDULE_WARN__])
    else:
        buttons.append([InlineKeyboardButton(text='‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ ‚ö†Ô∏è', callback_data='schedule:nftadmins')])

    buttons.append([__BACK_IN_MAIN_MENU__])

    return InlineKeyboardMarkup(row_width=1, inline_keyboard=buttons)


async def GenProfile(isSendNotifications: bool) -> InlineKeyboardMarkup:
    buttons: list[list[InlineKeyboardButton]] = []

    if isSendNotifications:
        buttons.append([InlineKeyboardButton(text='–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='profile:notifications:off_warn')])
    else:
        buttons.append([InlineKeyboardButton(text='–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='profile:notifications:on')])

    buttons.append([__BACK_IN_MAIN_MENU__])

    return InlineKeyboardMarkup(row_width=1, inline_keyboard=buttons)
